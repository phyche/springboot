package com.example.springboot.designMode.facade;

/**
 * 外观模式
 * 为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用
 *
 * 外观类（知道哪些子系统类负责处理请求，将客户的请求代理给适当的子系统类）
 * 外观类需要了解所有子系统的方法或属性，进行组合，以备外界使用
 *
 * 完美的体现了依赖倒转和迪米特法则
 *
 * 使用场合
 * 1.设计初期，有意识将不同层分离，层与层之间建立外观类
 * 2.开发阶段，子系统因为重构而复杂，增加外观类提供简单接口，减少彼此之间的依赖
 * 3.维护遗留的大型系统，为新系统开发一个外观类，提供设计遗留代码比较清晰的接口，新系统与外观类交互，外观类与遗留代码交互
 */
public class FacadeMain {

    public static void main(String[] strg) {
        Fund fund = new Fund();
        fund.buyFund();

        fund.sellFund();
    }
 }
